#!/bin/bash
#DO NOT MESS WITH THIS FILE#
imageScore=0 #Start the score at zero
posPoints=0 #Start with zero possible points
release="" #Which version of Ubuntu are we dealing with?
initialKernel=(#KERNEL#) #This will change every time you run ./install.sh

checkForRoot(){ #Gotta be root
if [ "$EUID" -ne 0 ]
  then echo "csel must be run as root"
  exit
fi
}

checkRelease(){ #Check for version of Ubuntu
if lsb_release -a | grep trusty > /dev/null
  then
    release="trusty"
  else
    release="xenial"
fi
}

drawHead(){ #Create the Score Report html 
  echo "<!doctype html><html><head><title>CSEL Score Report</title></head><body>" > $index
  echo '<table align="center" cellpadding="10"><tr><td><img src="/home/CYBERPATRIOT_DO_NOT_REMOVE/logo.png"></td><td><div align="center"><H2>Cyberpatriot Scoring Engine:Linux v0.3.1</H2><br>Developed by Josh Davis<br><b>Eastern Oklahoma County Technology Center</b><br>Feedback welcome: <a href="mailto:jdavis@eoctech.edu?Subject=CSEL" target="_top">jdavis@eoctech.edu</a></div></td><td><img src="/home/CYBERPATRIOT_DO_NOT_REMOVE/iguana.png"></td></tr></table><br><H2>Your Score: #TotalScore# out of #PossiblePoints#</H2><hr>' >> $index
}

drawTail(){ #Insert the score into the report
sed -i "s/#TotalScore#/"$imageScore"/g" $index
sed -i "s/#PossiblePoints#/"$posPoints"/g" $index

}

goodUser(){	#Penalize for deleting good users
if [ -z "$goodUser" ]; then :; else 
for i in "${goodUser[@]}" 
do
	if getent passwd $i > /dev/null 2>&1; then :; else
		echo '<p style="color:red">User ' $i 'deleted (-10 points)</p>' >> $index
			imageScore=$[$imageScore-10]
	fi
done
fi
}

badUser(){ #Check for bad users
if [ -z "$badUser" ]; then :; else posPoints=$[$posPoints+(${#badUser[@]} * 10)]
for i in "${badUser[@]}" 
do
	if getent passwd $i > /dev/null 2>&1; then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Bad User not Deleted' >> $index ;fi
	else
		echo '<p style="color:green">User' $i 'deleted. (10 points)' >> $index
		imageScore=$[$imageScore+10]
	fi
done
fi
}

changePassword(){ #Check certain users for blank passwords
if [ -z "$changePassword" ]; then :; else posPoints=$[$posPoints+(${#changePassword[@]} * 5)]
	for i in "${changePassword[@]}" #Check for blank passwords
	do 
		if [[ $(getent shadow | grep $i\:\:) ]]
		then
			if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Password Issue</p>' >> $index;fi
		else
			echo '<p style="color:green">User' $i 'password has been changed (5 points)' >> $index
			imageScore=$[$imageScore+5]
		fi
	done
fi
}

removeAdmin(){ #Check certain uses to see if they have been removed from admin
if [ -z "$removeAdmin" ]; then :; else posPoints=$[$posPoints+(${#removeAdmin[@]} * 10)]
for i in "${removeAdmin[@]}" 
do
	if [[ $(getent group sudo | grep $i) ]]  
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Admin Issue</p>' >> $index ;fi	
	else
		echo '<p style="color:green">User' $i 'removed from Admin group (10 points)</p>' >> $index	
		imageScore=$[$imageScore+10]
	fi
done
fi
}

secureSudoers(){
if [ -z "$secureSudoers" ]; then :; else  posPoints=$[$posPoints+(${#secureSudoers[@]} * 8)]
for i in "${secureSudoers[@]}"
do
  if [[ $(sudo cat /etc/sudoers | grep $i) ]]
  then
    if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Sudoers Issue</p>' >> $index ;fi
  else
    echo '<p style="color:green">/etc/sudoers file secured (8 points)</p>' >> $index	
    imageScore=$[$imageScore+8]
  fi
done
fi
}

disableGuest(){ #Is the Guest account disabled?
if [ -z "$disableGuest" ]; then :; else posPoints=$[$posPoints+(${#disableGuest[@]} * 5)]
	if [[ $(cat /etc/lightdm/lightdm.conf | grep allow-guest=false) ]]
	then
		echo '<p style="color:green">Guest account disabled (5 points)</p>' >> $index	
		imageScore=$[$imageScore+5]
	else
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Guest Account Issues</p>' >> $index;fi
	fi
fi
}

disableAutoLogin(){ #Is there an auto login account?
if [ -z "$disableAutoLogin" ];then :; else posPoints=$[$posPoints+(${#disableAutoLogin[@]} * 5)]
	if [[ $(cat /etc/lightdm/lightdm.conf | grep ^autologin-user) ]]
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Autologin Account Issues</p>' >> $index;fi

	else
		echo '<p style="color:green">Autologin disabled (5 points)</p>' >> $index	
		imageScore=$[$imageScore+5]
		
	fi
fi
}

minPassAge(){ #Check minimum password age
if [ -z "$minPassAge" ]; then :; else posPoints=$[$posPoints+(${#minPassAge[@]} * 7)]
currentMin=$(cat /etc/login.defs | grep ^PASS_MIN_DAYS | awk '{print $2;}')
if (( "$currentMin" < "$minPassAge" ))
then
	if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Password Policy Issue</p>' >> $index;fi	
else
	echo '<p style="color:green">Minimum Password age is at least '$minPassAge '(7 points)</p>' >> $index
		imageScore=$[$imageScore+7]
fi
fi
}

maxPassAge(){ #Check max password age
if [ -z "$maxPassAge" ]; then :; else posPoints=$[$posPoints+(${#maxPassAge[@]} * 7)]
currentMax=$(cat /etc/login.defs | grep ^PASS_MAX_DAYS | awk '{print $2;}')
if (( "$currentMax" <= "$maxPassAge" ))
then
	echo '<p style="color:green">Max Password age is at most '$maxPassAge '(7 points)</p>' >> $index		
		imageScore=$[$imageScore+7]
else
	if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Password Policy Issue</p>' >> $index ;fi	
fi
fi
}

maxLoginTries(){ #Check max login threshold
if [ -z "$maxLoginTries" ]; then :; else posPoints=$[$posPoints+(${#maxLoginTries[@]} * 7)]
currentMax=$(cat /etc/login.defs | grep ^LOGIN_RETRIES | awk '{print $2;}')
if (( "$currentMax" <= "$maxLoginTries" ))
then
	echo '<p style="color:green">Max Login Tries is at least '$maxLoginTries '(7 points)</p>' >> $index		
		imageScore=$[$imageScore+7]
else
	if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Password Policy Issue</p>' >> $index;fi	
fi
fi
}

kernelUpdate(){ #Compare the kernel with the version in use when install.sh was last run
if [[ `uname -r` == "$initialKernel" ]]
  then  posPoints=$[$posPoints+(${#badUser[@]} * 7)]
if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Kernel Issue</p>' >> $index;fi	
  else
	echo '<p style="color:green">Kernel updated from '$initialKernel '(7 points)</p>' >> $index		
		imageScore=$[$imageScore+7]
fi
}

goodProgram(){ #Check for good programs
if [ -z "$goodProgram" ]; then :; else posPoints=$[$posPoints+(${#goodProgram[@]} * 10)]
for i in "${goodProgram[@]}" 
do
	if apt-cache policy $i | grep "Installed: (none)" > /dev/null
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Good Program(s) not installed</p>' >> $index;fi
	else
		echo '<p style="color:green">Program' $i 'installed. (10 points)</p>' >> $index
		imageScore=$[$imageScore+10]
	fi
done
fi
}

badProgram(){ #Check for bad programs
if [ -z "$badProgram" ]; then :; else posPoints=$[$posPoints+(${#badProgram[@]} * 10)]
for i in "${badProgram[@]}" 
do
	if apt-cache policy $i | grep "Installed: (none)" > /dev/null
	then
		echo '<p style="color:green">Program' $i 'uninstalled. (10 points)</p>' >> $index
		imageScore=$[$imageScore+10]
	else
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Bad program(s) installed</p>' >> $index;fi
	fi
done
fi
}

badFile(){ #Check for bad files
if [ -z "$badFile" ]; then :; else posPoints=$[$posPoints+(${#badFile[@]} * 10)]
for i in "${badFile[@]}" 
do 
	if [ -e "$i" ]
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Bad File(s)</p>' >> $index;fi
	else
		echo '<p style="color:green">' $i 'deleted (10 points)</p>' >> $index
		imageScore=$[$imageScore+10]
	fi
done
fi
}

backdoor(){ #Look for process running with the name $backdoor
if [ -z "$backdoor" ]; then :; else posPoints=$[$posPoints+(${#backdoor[@]} * 10)]
if pgrep -x nc > /dev/null
then
	if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Backdoor not Removed</p>' >> $index ;fi
else
	echo '<p style="color:green">'$backdoor' backdoor is not running (10 points)</p>' >> $index
	imageScore=$[$imageScore+10]		
fi
fi
}

checkHosts(){ #Check for certain words in the hosts file
if [ -z "$checkHosts" ]; then :; else posPoints=$[$posPoints+(${#checkHosts[@]} * 7)]
if [[ $(cat /etc/hosts | grep ${checkHosts}) ]]
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS hosts file issue</p>' >> $index;fi
	else
		echo '<p style="color:green">Hosts file corrected (7 points)</p>' >> $index
		imageScore=$[$imageScore+7]
fi
fi
}

checkCronTab(){ #Check for certain lines in the root crontab
if [ -z "$checkCronTab" ]; then :; else posPoints=$[$posPoints+(${#checkCronTab[@]} * 10)]
	for i in "${checkCronTab[@]}" 
	do
		if crontab -l -u root | grep $checkCronTab > /dev/null
		then
			if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Crontab Issue</p>' >> $index;fi
		else
			echo '<p style="color:green">Bad cronjob removed (10 points)</p>' >> $index
			imageScore=$[$imageScore+10]
		fi	
	done
fi
}

checkFirewall(){ #Is ufw installed and enabled?
if [ -z "$checkFirewall" ]; then :; else posPoints=$[$posPoints+(${#checkFirewall[@]} * 10)]
	if sudo ufw status | grep "Status: active" > /dev/null
	then
		echo '<p style="color:green">Firewall is active (10 points)</p>' >> $index
		imageScore=$[$imageScore+10]
	else
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Firewall Issue</p>' >> $index;fi
	fi
fi
}

checkForensicsQuestion(){ #Check for the correct answer in the forensics question
if [ -z "$forensicsAnswer" ]; then :; else posPoints=$[$posPoints+(${#forensicsAnswer[@]} * 10)]
	if grep -q  "ANSWER: $forensicsAnswer" $forensicsPath
	then
			echo '<p style="color:green">Forensics Question answered CORRECT (10 points)</p>' >> $index
			imageScore=$[$imageScore+10]
	else
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Forensics Question is WRONG</p>' >> $index;fi
	fi
fi
}

#---------------------Categories---------------------#

userManagement(){
echo '<H3>USER MANAGEMENT</H3>' >> $index
goodUser
badUser
changePassword
removeAdmin
secureSudoers
}

securityPolicies(){
echo '<H3>SECURITY POLICIES</H3>' >> $index
disableGuest
disableAutoLogin
minPassAge
maxPassAge
maxLoginTries
}
programManagement(){
echo '<H3>PROGRAMS</H3>' >> $index
goodProgram
badProgram
}

fileManagement(){
echo '<H3>FILE MANAGEMENT</H3>' >> $index
badFile
}

miscPoints(){
echo '<H3>MISCELLANEOUS</H3>' >> $index
backdoor
checkHosts
checkCronTab
checkFirewall
checkForensicsQuestion
}

#---------------------Main Loop---------------------#
checkForRoot
checkRelease
drawHead
userManagement
securityPolicies
programManagement
fileManagement
miscPoints
drawTail