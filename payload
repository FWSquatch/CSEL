#DO NOT MESS WITH THIS FILE#
imageScore=0 #Start the score at zero

checkForRoot(){
if [ "$EUID" -ne 0 ]
  then echo "csel must be run as root"
  exit
fi
}

drawHead(){
  echo "<!doctype html><html><head><title>CSEL Score Report</title></head><body>" > $index
  echo '<table align="center" cellpadding="10"><tr><td><img src="/home/CYBERPATRIOT_DO_NOT_REMOVE/logo.png"></td><td><div align="center"><H2>Cyberpatriot Scoring Engine:Linux</H2><br>Developed by Josh Davis<br><b>Eastern Oklahoma County Technology Center</b></div></td><td><img src="/home/CYBERPATRIOT_DO_NOT_REMOVE/iguana.png"></td></tr></table><br><H2>Your Score: #TotalScore#</H2><hr>' >> $index
}

drawTail(){
sed -i "s/#TotalScore#/"$imageScore"/g" $index
}

goodUser(){	
for i in "${goodUser[@]}" #Penalize for deleting good users
do
	if getent passwd $i > /dev/null 2>&1; then
		: #Do Nothing
	else
		echo '<p style="color:red">User ' $i 'deleted (-10 points)</p>' >> $index
			imageScore=$[$imageScore-10]
	fi
done
}
badUser(){
for i in "${badUser[@]}" #Check for bad users
do
	if getent passwd $i > /dev/null 2>&1; then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Bad User not Deleted' >> $index ;fi
	else
		echo '<p style="color:green">User' $i 'deleted. (10 points)' >> $index
		imageScore=$[$imageScore+10]
	fi
done
}

changePassword(){
if [ -z "$changePassword" ] #Check certain users for blank passwords
then
	: #Do nothing
else
	for i in "${changePassword[@]}" #Check for blank passwords
	do 
		if [[ $(getent shadow | grep $i\:\:) ]]
		then
			if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Password Issue</p>' >> $index;fi
		else
			echo '<p style="color:green">User' $i 'password has been changed (5 points)' >> $index
			imageScore=$[$imageScore+5]
		fi
	done
fi
}
removeAdmin(){
for i in "${removeAdmin[@]}" #Check certain uses to see if they have been removed from admin
do
	if [[ $(getent group sudo | grep $i) ]]  
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Admin Issue</p>' >> $index ;fi	
	else
		echo '<p style="color:green">User' $i 'removed from Admin group (10 points)</p>' >> $index	
		imageScore=$[$imageScore+10]
	fi
done
}
disableGuest(){
if [ "$disableGuest" == "y" ]
then
	if [[ $(cat /etc/lightdm/lightdm.conf | grep allow-guest=false) ]]
	then
		echo '<p style="color:green">Guest account disabled (5 points)</p>' >> $index	
		imageScore=$[$imageScore+5]
	else
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Guest Account Issues</p>' >> $index;fi
	fi
else
	: #Do nothing
fi
}
disableAutoLogin(){
if [ "$disableAutoLogin" == "" ];then :; else
	if [[ $(cat /etc/lightdm/lightdm.conf | grep ^autologin-user) ]]
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Autologin Account Issues</p>' >> $index;fi

	else
		echo '<p style="color:green">Autologin disabled (5 points)</p>' >> $index	
		imageScore=$[$imageScore+5]
		
	fi
fi
}
minPassAge(){
if [ "$minPassAge" == "" ]; then :; else
currentMin=$(cat /etc/login.defs | grep ^PASS_MIN_DAYS | awk '{print $2;}')
if (( "$currentMin" < "$minPassAge" ))
then
	if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Password Policy Issue</p>' >> $index;fi	
else
	echo '<p style="color:green">Minimum Password age is at least '$minPassAge '(7 points)</p>' >> $index
		imageScore=$[$imageScore+7]
fi
fi
}
maxPassAge(){
if [ "$maxPassAge" == "" ]; then :; else
currentMax=$(cat /etc/login.defs | grep ^PASS_MAX_DAYS | awk '{print $2;}')
if (( "$currentMax" <= "$maxPassAge" ))
then
	echo '<p style="color:green">Max Password age is at most '$maxPassAge '(7 points)</p>' >> $index		
		imageScore=$[$imageScore+7]
else
	if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Password Policy Issue</p>' >> $index ;fi	
fi
fi
}
maxLoginTries(){
if [ "$maxLoginTries" == "" ]; then :; else
currentMax=$(cat /etc/login.defs | grep ^LOGIN_RETRIES | awk '{print $2;}')
if (( "$currentMax" <= "$maxLoginTries" ))
then
	echo '<p style="color:green">Max Login Tries is at least '$maxLoginTries '(7 points)</p>' >> $index		
		imageScore=$[$imageScore+7]
else
	if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Password Policy Issue</p>' >> $index;fi	
fi
fi
}
goodProgram(){
for i in "${goodPrograms[@]}" #Check for good programs
do
	if apt-cache policy $i | grep "Installed: (none)" > /dev/null
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Good Program(s) not installed</p>' >> $index;fi
	else
		echo '<p style="color:green">Program' $i 'installed. (10 points)</p>' >> $index
		imageScore=$[$imageScore+10]
	fi
done
}
badProgram(){
for i in "${badPrograms[@]}" #Check for good programs
do
	if apt-cache policy $i | grep "Installed: (none)" > /dev/null
	then
		echo '<p style="color:green">Program' $i 'uninstalled. (10 points)</p>' >> $index
		imageScore=$[$imageScore+10]
	else
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Bad program(s) installed</p>' >> $index;fi
	fi
done
}
badFile(){
for i in "${badFiles[@]}" #Check for bad files
do 
	if [ -e "$i" ]
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Bad File(s)</p>' >> $index;fi
	else
		echo '<p style="color:green">' $i 'deleted (10 points)</p>' >> $index
		imageScore=$[$imageScore+10]
	fi
done
}

backdoor(){
if [ "$backdoor" == "" ]; then :; else
if pgrep -x nc > /dev/null
then
	if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Backdoor not Removed</p>' >> $index ;fi
else
	echo '<p style="color:green">'$backdoor' backdoor is not running (10 points)</p>' >> $index
	imageScore=$[$imageScore+10]		
fi
fi
}

checkHosts(){
if [[ $(cat /etc/hosts | grep ${checkHosts}) ]]
	then
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS hosts file issue</p>' >> $index;fi
	else
		echo '<p style="color:green">Hosts file corrected (7 points)</p>' >> $index
		imageScore=$[$imageScore+7]
fi
fi
}
checkCronTab(){
if [ "$checkCronTab" == "" ]; then :; else
	for i in "${checkCronTab[@]}" 
	do
		if crontab -l -u root | grep $checkCronTab > /dev/null
		then
			if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Crontab Issue</p>' >> $index;fi
		else
			echo '<p style="color:green">Bad cronjob removed (10 points)</p>' >> $index
			imageScore=$[$imageScore+10]
		fi	
	done
fi
}
checkForensicsQuestion(){
if [ "$forensicsAnswer" == "" ]; then :; else
	if grep -q  "<ANSWER>: $forensicsAnswer" $forensicsPath
	then
			echo '<p style="color:green">Forensics Question answered CORRECT (10 points)</p>' >> $index
			imageScore=$[$imageScore+10]
	else
		if [ "$silentMiss" == "y" ]; then :; else echo '<p style="color:red">MISS Forensics Question is WRONG</p>' >> $index;fi
	fi
fi
}
#---------------------Categories---------------------#

userManagement(){
echo '<H3>USER MANAGEMENT</H3>' >> $index
goodUser
badUser
changePassword
removeAdmin
}

securityPolicies(){
echo '<H3>SECURITY POLICIES</H3>' >> $index
disableGuest
disableAutoLogin
minPassAge
maxPassAge
maxLoginTries
}
programManagement(){
echo '<H3>PROGRAMS</H3>' >> $index
goodProgram
badProgram
}

fileManagement(){
echo '<H3>FILE MANAGEMENT</H3>' >> $index
badFile
}

miscPoints(){
echo '<H3>MISCELLANEOUS</H3>' >> $index
backdoor
checkHosts
checkCronTab
checkForensicsQuestion
}

#---------------------Main Loop---------------------#
checkForRoot
drawHead
userManagement
securityPolicies
programManagement
fileManagement
miscPoints
drawTail
