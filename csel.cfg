#!/bin/bash

#Cyberpatriot Scoring Engine: Linux v 0.4
#Tested in Ubuntu 16.04. Somewhat compatible with 14.04 (working
#on making this work fully).
#
#Set up your scoring by changing the values in this file. Turning
#off silentMiss is helpful for debugging. Many of these you can 
#leave blank if you are not scoring them. Once you have this file
#set up, then open a terminal and navigate to the CSEL directory.
#Change the permissions of the install file: chmod 777 install.sh
#and run sudo ./install.sh. This will create the csel file, the 
#index file, and a cron job to update scoring every 2 minutes. 
#After this, you can delete the CSEL directory.

#################################################################
#####---------------------Configuration---------------------#####

index=(/home/repair/Desktop/ScoreReport.html) #Where do you want the score report to be generated? This CANNOT be left blank.
silentMiss=(n) #y for silent misses, n will tell students generally where points are missing
goodUser=(user1 user2 user3 user4 user5) #10 point penalty for deleting these users
badUser=(user6 user7) #10 points for deleting bad users
newUser=(user8) #5 points for creating a required user
changePassword=(root user3 user4) #5 points for changing user password
removeAdmin=(user4) #10 points for removing bad admins
secureSudoers=(timestamp_timeout=-1) #8 points for removing things from /etc/sudoers file
disableGuest=(y) #y for 5 points for disabling guest account, leave empty for no scoring
disableAutoLogin=(y) #y for 5 points for disabling auto login, leave empty for no scoring 
disableUserGreeter=(y) #y for 5 points for disabling list of usernames at login gretter, leave empty for no scoring
checkStartup=() #enter a word from the line in rc.local that you want removed (10 pts)
minPassAge=(3) #set to value of the min password age you want scored. Leave blank for no scoring. 7 pts
maxPassAge=(20) #set to value of the max password age you want scored. Leave blank for no scoring. 7pts
maxLoginTries=(5) #set to value of the max login tries allowed. Leave blank for no scoring
checkPassHist=() #set the value to the minimum history acceptable to score (7 points)
checkPassLength=() #set to the value of the minimum acceptable password length to score (7 points)
goodProgram=(libpam-cracklib clamav OtherGoodProgram) #10 points for each good program installed
badProgram=(john bind9 OtherBadProgram) #10 points for each bad program uninstalled
disableSshRootLogin=(y) #enter y to score for disabling root login in /etc/ssh/sshd_config (7 pts)
badFile=(/home/user3/Desktop/.BadMediaFile.mp4 /home/.AnotherBadFile.zip) # 7 points for deleting each bad files
backdoor=(nc) #10 points for removing backdoor. Enter the name of your backdoor (usually nc)
checkHosts=(google) #enter a word from the line that you want removed from hosts file. 7 pts
badCron=(user1 BadScript.sh) #The first word needs to be the user crontab to search and the second word should be the word we are looking to remove or comment out. 7 points
checkFirewall=(y) #enter y to check for firewall enabled (ufw only for now) 10 pts
checkKernel=(y) #enter y to check for kernel update. The script will check the current kernel against the kernel present at ./install.sh 7 pts
updatePackListsInt=(1) #Set to 1,2,7,or 14 for the # for days between update checks. Set to 0 to score turning off. CP reccomends 1 (5 pts)
updateAutoInstall=(1) #Set to 1 for auto install, 0 if you want to score turning off auto-install. CP reccomends 1 (5 pts)
avUpdated=(y) #Set to y to score updating clamav via freshclam															  
forensicsPath1=(/home/user1/Desktop/Question1.txt) #where is your forensics question?
forensicsAnswer1=(DoNotUseSpacesInYourAnswer) #answer to your forensics question (must be preceded by ANSWER: in your file)
forensicsPath1=(/home/user1/Desktop/Question1.txt) #where is your forensics question?
forensicsAnswer2=(DoNotUseSpacesInYourAnswer) #answer to your forensics question (must be preceded by ANSWER: in your file)

#Experimental
#These generic modules allow you to choose a file, choose text to look for (or delete), assign a point value, and write a custom success message. They also take # (comments) into account.
fileContainsText1=(/home/repair/myfile "okgo hello" 7 "myfile configured correctly.") #Command has 4 parts: 1-file location 2-text to add or uncomment 3-points to award 4-Success message for score report 
fileContainsText2=(/home/repair/otherfile "AllowRootLogin no" 7 "otherfile configured correctly.") #Command has 4 parts: 1-file location 2-text to add or uncomment 3-points to award 4-Success message for score report 
fileNoLongerContains1=(/etc/ssh/ssh_config "blueberry" 7 "Ssh_config problem fixed") #Command has 4 parts: 1-file location 2-text to delete or comment 3-points to award 4-Success message for score report
fileNoLongerContains2=(/etc/ssh/ssh_config "blueberry" 7 "Ssh_config problem fixed") #Command has 4 parts: 1-file location 2-text to delete or comment 3-points to award 4-Success message for score report



#####---------------------Configuration---------------------#####
#################################################################

imageScore=0 #Start the score at zero
posPoints=0 #Start with zero possible points
release="" #Which version of Ubuntu are we dealing with?
#The following will change every time you run ./install.sh
initialKernel=(%KERNEL%) 
installDate=(%INSTALLDATE%)				   
